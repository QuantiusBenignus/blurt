#!/usr/bin/zsh
#If you replace the shell above with bash, note also lines 56 to 66
# Copyright (c) 2024 Quantius Benignus
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#--------------------------------------------------------------------------

# NAME: wsi 
# PREREQUSITES: 
#      - whisper.cpp installation (see https://github.com/ggerganov/whisper.cpp) 
#      - recent versions of 'sox', 'xsel' (or 'wl-copy' in Wayland) command-line programs from your system's repositories.
#--------------------------------------------------------------------------
# Initialize default clipboard value, use PRIMARY selection (middle mouse button to paste transcribed text). 
CLIPBOARD=false

#--USER CONFIGURATION BLOCK.--------------------------------------------------------------------------- 
#Please, adjust the variables here to suit your environment:
#Override clipboard choice from here instead of using a command line flag ('wsi -c') when calling this script: 
#(uncomment next line to paste from clipboard with 'CTRL+V' or 'SHIFT+Ins' by default.) 
#CLIPBOARD=true
# Store temp files in shared memory for speed and to reduce SSD/HDD "grinding":
TEMPD='/dev/shm'
# Default whisper.cpp model file for inference. PROVIDE CORRECT LOCATION:
#model="$HOME/AI/Models/whisper/ggml-tiny.en.bin"
model="$HOME/AI/Models/whisper/ggml-base.en.bin"
# Hardcoded temp wav file to store the voice memo and get overwritten every time (in RAM):
ramf="$TEMPD/wfile"
#Set the number of processing threads for whisper.cpp inference (uncomment and adjust for your case or use optimum below):
#NTHR=8
#It seems that the optimum number of transcribe threads should equal half CPU processing cores:
NTHR=$(( $(getconf _NPROCESSORS_ONLN) / 2 ))
#--END USER CONFIGURATION BLOCK------------------------------------------------------------------------


#X11 or Wayland:
wm="${XDG_SESSION_TYPE:-$(loginctl show-session $(loginctl | grep $(whoami) | awk '{print $1}') -p Type --value)}"

#--CHECK DEPENDENCIES. This block can be commented out once setup confirmed.---------------------------
command -v sox &>/dev/null || { echo "sox is required. Please, install sox" >&2 ; exit 1 ; }
command -v transcribe &>/dev/null || { echo -e "Please, install whisper.cpp (see https://github.com/ggerganov/whisper.cpp)\
\nand create 'transcribe' in your PATH as a symbolic link to the main executable, e.g.\n \
 'ln -s /full/path/to/whisper.cpp/main \$HOME/bin/transcribe'" >&2 ; exit 1 ; }
#Now let's check if we are in X11 or Wayland and use the right utility:
if [[ wm == "wayland" ]]; then
    command -v wl-copy &>/dev/null || { echo "wl-copy is needed for the clipboard. Please, install wl-copy" >&2 ; exit 1 ; } 
elif [[ wm == "X11" ]]; then
    command -v xsel &>/dev/null || { echo "We rely on xsel for the clipboard. Please, install xsel." >&2 ; exit 1 ; }
fi
#--END CHECK DEPENDENCIES. The above block can be commented out after successful first run.------------

# Process command line arguments. (CLIPBOARD can be selected by default from USER CONFIG BLOCK above.)
while [ $# -gt 0 ]; do
    case "$1" in
        -c|--clipboard)
            CLIPBOARD=true
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [-c|--clipboard]"
            echo "  -c, --clipboard: Use clipboard instead of PRIMARY selection"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

#Hear the complaints and do not continue with the sequence:
set -e

rec -q -t wav $ramf rate 16k silence 1 0.1 1% 1 2.0 6%  2>/dev/null
 
str="$(transcribe -t $NTHR -nt -m $model -f $ramf 2>/dev/null)" 

# Whisper detected non-speech events such as (wind blowing): 
str="${str/\(*\)}"   
str="${str/\[*\]}"
str="${str#$'\n'}"    
str="${str#$'\n'}"
#Prefer the power of zsh, but loose full POSIX compliance.
if [ -n "$ZSH_NAME" ]; then
    str="${str#*([[:space:]])}"
    str="${(u)str}"
elif [ -n "$BASH" ]; then
    #Running in bash because you changed the shebang on line 1
    str="${str##+([[:space:]])}"
    str="${str^}"
else
    echo "Unknown shell, assuming bash compliance"
    str="${str##+([[:space:]])}"
    str="${str^}"
fi

#We have a result, now we make a few decisions:
#If this is somehow run in a text console: 
if [[ -z "${DISPLAY}" ]] || [[ -z "${DESKTOP_SESSION}" ]] || [[ -z "${XDG_CURRENT_DESKTOP}" ]]; then
#"Not running in a known graphics environment. Using standard output:
    echo $str ; exit 0
else
 #If the system graphics environment is not GNOME, we can only run this script directly, not from a GNOME extension.

 #Now let's check if we are in X11 or Wayland and use the right utility: 
 case "$wm" in
    "x11")
        if [ "$CLIPBOARD" = true ]; then
          echo $str | xsel -ib
        else
          echo $str | xsel -ip
        fi
        ;;
    "wayland")
        if [ "$CLIPBOARD" = true ]; then
          echo $str | wl-copy
        else
          echo $str | wl-copy -p
        fi 
        ;;
    *)
        echo $str
        ;;
 esac
fi
